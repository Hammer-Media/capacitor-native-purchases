{
  "api": {
    "name": "NativePurchasesPlugin",
    "slug": "nativepurchasesplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "restorePurchases",
        "signature": "() => Promise<{ transactions: Transaction[]; }>",
        "parameters": [],
        "returns": "Promise<{ transactions: Transaction[]; }>",
        "tags": [],
        "docs": "Restores a user's previous  and links their appUserIDs to any user's also using those .",
        "complexTypes": [
          "Transaction"
        ],
        "slug": "restorepurchases"
      },
      {
        "name": "purchaseProduct",
        "signature": "(options: { productIdentifier: string; planIdentifier?: string; productType?: PURCHASE_TYPE; quantity?: number; appAccountToken?: string; }) => Promise<Transaction>",
        "parameters": [
          {
            "name": "options",
            "docs": "- The product to purchase",
            "type": "{ productIdentifier: string; planIdentifier?: string | undefined; productType?: PURCHASE_TYPE | undefined; quantity?: number | undefined; appAccountToken?: string | undefined; }"
          }
        ],
        "returns": "Promise<Transaction>",
        "tags": [
          {
            "name": "param",
            "text": "options - The product to purchase"
          },
          {
            "name": "param",
            "text": "options.productIdentifier - The product identifier of the product you want to purchase."
          },
          {
            "name": "param",
            "text": "options.productType - Only Android, the type of product, can be inapp or subs. Will use inapp by default."
          },
          {
            "name": "param",
            "text": "options.planIdentifier - Only Android, the identifier of the base plan you want to purchase from Google Play Console. REQUIRED for Android subscriptions, ignored on iOS."
          },
          {
            "name": "param",
            "text": "options.quantity - Only iOS, the number of items you wish to purchase. Will use 1 by default."
          },
          {
            "name": "param",
            "text": "options.appAccountToken - Optional identifier uniquely associated with the user's account in your app.\n  PLATFORM REQUIREMENTS:\n  - iOS: Must be a valid UUID format (StoreKit 2 requirement)\n  - Android: Can be any obfuscated string (max 64 chars), maps to ObfuscatedAccountId\n  SECURITY: DO NOT use PII like emails in cleartext - use UUID or hashed value.\n  RECOMMENDED: Use UUID v5 with deterministic generation for cross-platform compatibility."
          }
        ],
        "docs": "Started purchase process for the given product.",
        "complexTypes": [
          "Transaction",
          "PURCHASE_TYPE"
        ],
        "slug": "purchaseproduct"
      },
      {
        "name": "getProducts",
        "signature": "(options: { productIdentifiers: string[]; productType?: PURCHASE_TYPE; }) => Promise<{ products: Product[]; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "- The product identifiers you wish to retrieve information for",
            "type": "{ productIdentifiers: string[]; productType?: PURCHASE_TYPE | undefined; }"
          }
        ],
        "returns": "Promise<{ products: Product[]; }>",
        "tags": [
          {
            "name": "param",
            "text": "options - The product identifiers you wish to retrieve information for"
          },
          {
            "name": "param",
            "text": "options.productIdentifiers - Array of product identifiers"
          },
          {
            "name": "param",
            "text": "options.productType - Only Android, the type of product, can be inapp or subs. Will use inapp by default."
          },
          {
            "name": "returns",
            "text": "- The requested product info"
          }
        ],
        "docs": "Gets the product info associated with a list of product identifiers.",
        "complexTypes": [
          "Product",
          "PURCHASE_TYPE"
        ],
        "slug": "getproducts"
      },
      {
        "name": "getProduct",
        "signature": "(options: { productIdentifier: string; productType?: PURCHASE_TYPE; }) => Promise<{ product: Product; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "- The product identifier you wish to retrieve information for",
            "type": "{ productIdentifier: string; productType?: PURCHASE_TYPE | undefined; }"
          }
        ],
        "returns": "Promise<{ product: Product; }>",
        "tags": [
          {
            "name": "param",
            "text": "options - The product identifier you wish to retrieve information for"
          },
          {
            "name": "param",
            "text": "options.productIdentifier - The product identifier"
          },
          {
            "name": "param",
            "text": "options.productType - Only Android, the type of product, can be inapp or subs. Will use inapp by default."
          },
          {
            "name": "returns",
            "text": "- The requested product info"
          }
        ],
        "docs": "Gets the product info for a single product identifier.",
        "complexTypes": [
          "Product",
          "PURCHASE_TYPE"
        ],
        "slug": "getproduct"
      },
      {
        "name": "isBillingSupported",
        "signature": "() => Promise<{ isBillingSupported: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ isBillingSupported: boolean; }>",
        "tags": [],
        "docs": "Check if billing is supported for the current device.",
        "complexTypes": [],
        "slug": "isbillingsupported"
      },
      {
        "name": "getPluginVersion",
        "signature": "() => Promise<{ version: string; }>",
        "parameters": [],
        "returns": "Promise<{ version: string; }>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise with version for this device"
          },
          {
            "name": "throws",
            "text": "An error if the something went wrong"
          }
        ],
        "docs": "Get the native Capacitor plugin version",
        "complexTypes": [],
        "slug": "getpluginversion"
      },
      {
        "name": "getPurchases",
        "signature": "(options?: { productType?: PURCHASE_TYPE | undefined; appAccountToken?: string | undefined; } | undefined) => Promise<{ purchases: Transaction[]; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "- Optional parameters for filtering purchases",
            "type": "{ productType?: PURCHASE_TYPE | undefined; appAccountToken?: string | undefined; } | undefined"
          }
        ],
        "returns": "Promise<{ purchases: Transaction[]; }>",
        "tags": [
          {
            "name": "param",
            "text": "options - Optional parameters for filtering purchases"
          },
          {
            "name": "param",
            "text": "options.productType - Only Android, filter by product type (inapp or subs). If not specified, returns both types."
          },
          {
            "name": "param",
            "text": "options.appAccountToken - Optional filter to restrict results to purchases that used the provided account token.\n   Must be the same identifier used during purchase (UUID format for iOS, any obfuscated string for Android).\n   iOS: UUID format required. Android: Maps to ObfuscatedAccountId."
          },
          {
            "name": "returns",
            "text": "Promise that resolves with array of user's purchases"
          },
          {
            "name": "throws",
            "text": "An error if the purchase query fails"
          },
          {
            "name": "since",
            "text": "7.2.0"
          }
        ],
        "docs": "Gets all the user's purchases (both in-app purchases and subscriptions).\nThis method queries the platform's purchase history for the current user.",
        "complexTypes": [
          "Transaction",
          "PURCHASE_TYPE"
        ],
        "slug": "getpurchases"
      },
      {
        "name": "getLatestSignedTransaction",
        "signature": "() => Promise<{ jwt: string; }>",
        "parameters": [],
        "returns": "Promise<{ jwt: string; }>",
        "tags": [
          {
            "name": "returns",
            "text": "Promise with the JWT token"
          },
          {
            "name": "throws",
            "text": "An error if no transactions found or StoreKit 2 not available"
          }
        ],
        "docs": "Get the latest signed transaction JWT token. iOS only.",
        "complexTypes": [],
        "slug": "getlatestsignedtransaction"
      },
      {
        "name": "showManageSubscriptions",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "Opens the native subscription management interface for the user.",
        "complexTypes": [],
        "slug": "showmanagesubscriptions"
      },
      {
        "name": "manageSubscriptions",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "Promise that resolves when the management page is opened"
          },
          {
            "name": "throws",
            "text": "An error if the subscription management page cannot be opened"
          },
          {
            "name": "since",
            "text": "7.10.0"
          }
        ],
        "docs": "Opens the platform's native subscription management page.\nThis allows users to view, modify, or cancel their subscriptions.\n\n- iOS: Opens the App Store subscription management page for the current app\n- Android: Opens the Google Play subscription management page",
        "complexTypes": [],
        "slug": "managesubscriptions"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'transactionUpdated', listenerFunc: (transaction: Transaction) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'transactionUpdated'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(transaction: Transaction) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "Listen for StoreKit transaction updates delivered by Apple's Transaction.updates.\nFires on app launch if there are unfinished transactions, and for any updates afterward.\niOS only.",
        "complexTypes": [
          "PluginListenerHandle",
          "Transaction"
        ],
        "slug": "addlistenertransactionupdated-"
      },
      {
        "name": "removeAllListeners",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "Remove all registered listeners",
        "complexTypes": [],
        "slug": "removealllisteners"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "Transaction",
      "slug": "transaction",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "transactionId",
          "tags": [],
          "docs": "The unique transaction identifier.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "originalTransactionId",
          "tags": [],
          "docs": "The original transaction identifier (for renewals). iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "receipt",
          "tags": [],
          "docs": "Receipt data for validation (iOS only - base64 encoded receipt)",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "appAccountToken",
          "tags": [],
          "docs": "An optional obfuscated identifier that uniquely associates the transaction with a user account in your app.\n\nPURPOSE:\n- Fraud detection: Helps platforms detect irregular activity (e.g., many devices purchasing on the same account)\n- User linking: Links purchases to in-game characters, avatars, or in-app profiles\n\nPLATFORM DIFFERENCES:\n- iOS: Must be a valid UUID format (e.g., \"550e8400-e29b-41d4-a716-446655440000\")\n       Apple's StoreKit 2 requires UUID format for the appAccountToken parameter\n- Android: Can be any obfuscated string (max 64 chars), maps to Google Play's ObfuscatedAccountId\n          Google recommends using encryption or one-way hash\n\nSECURITY REQUIREMENTS (especially for Android):\n- DO NOT store Personally Identifiable Information (PII) like emails in cleartext\n- Use encryption or a one-way hash to generate an obfuscated identifier\n- Maximum length: 64 characters (both platforms)\n- Storing PII in cleartext will result in purchases being blocked by Google Play\n\nIMPLEMENTATION EXAMPLE:\n```typescript\n// For iOS: Generate a deterministic UUID from user ID\nimport { v5 as uuidv5 } from 'uuid';\nconst NAMESPACE = '6ba7b810-9dad-11d1-80b4-00c04fd430c8'; // Your app's namespace UUID\nconst appAccountToken = uuidv5(userId, NAMESPACE);\n\n// For Android: Can also use UUID or any hashed value\n// The same UUID approach works for both platforms\n```",
          "complexTypes": [],
          "type": "string | null | undefined"
        },
        {
          "name": "productIdentifier",
          "tags": [],
          "docs": "Product Id associated with the transaction.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "productId",
          "tags": [],
          "docs": "Product identifier associated with the transaction. iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "quantity",
          "tags": [],
          "docs": "Purchase quantity. iOS only.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "purchaseDate",
          "tags": [],
          "docs": "Purchase date (string in ISO 8601 format for Android, number in milliseconds since epoch for iOS).",
          "complexTypes": [],
          "type": "string | number | undefined"
        },
        {
          "name": "originalPurchaseDate",
          "tags": [],
          "docs": "Original purchase date (string in ISO 8601 format for Android, number in milliseconds since epoch for iOS).",
          "complexTypes": [],
          "type": "string | number | undefined"
        },
        {
          "name": "signedDate",
          "tags": [],
          "docs": "Transaction signed date in milliseconds since epoch. iOS only.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "expirationDate",
          "tags": [],
          "docs": "Expiration date of the transaction in ISO 8601 format (for subscriptions).",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "expiresDate",
          "tags": [],
          "docs": "Expiration date for subscriptions (in milliseconds since epoch). iOS only.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "isActive",
          "tags": [],
          "docs": "Whether the transaction is still active/valid.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "willCancel",
          "tags": [],
          "docs": "Whether the subscription will be cancelled at the end of the billing cycle, or null if not cancelled. Only available on iOS.",
          "complexTypes": [],
          "type": "boolean | null | undefined"
        },
        {
          "name": "purchaseState",
          "tags": [],
          "docs": "Purchase state of the transaction.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "transactionReason",
          "tags": [],
          "docs": "Transaction reason (PURCHASE, RENEWAL, etc.). iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "environment",
          "tags": [],
          "docs": "App Store environment (Sandbox/Production). iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "storefront",
          "tags": [],
          "docs": "App Store storefront. iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "storefrontId",
          "tags": [],
          "docs": "App Store storefront identifier. iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "price",
          "tags": [],
          "docs": "Transaction price. iOS only.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "currency",
          "tags": [],
          "docs": "Currency code. iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "subscriptionGroupId",
          "tags": [],
          "docs": "Subscription group identifier (for subscriptions). iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "webOrderLineItemId",
          "tags": [],
          "docs": "Web order line item identifier. iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "appTransactionId",
          "tags": [],
          "docs": "App transaction identifier. iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "bundleId",
          "tags": [],
          "docs": "App bundle identifier. iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "deviceVerification",
          "tags": [],
          "docs": "Device verification data. iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "deviceVerificationNonce",
          "tags": [],
          "docs": "Device verification nonce. iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "inAppOwnershipType",
          "tags": [],
          "docs": "In-app ownership type (PURCHASED, FAMILY_SHARED, etc.). iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "jwt",
          "tags": [],
          "docs": "Signed transaction JWT token. iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "orderId",
          "tags": [],
          "docs": "Order ID associated with the transaction (Android).",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "purchaseToken",
          "tags": [],
          "docs": "Purchase token associated with the transaction (Android).",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "isAcknowledged",
          "tags": [],
          "docs": "Whether the purchase has been acknowledged (Android).",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "productType",
          "tags": [],
          "docs": "Product type (inapp or subs).",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "type",
          "tags": [],
          "docs": "Product type (Auto-Renewable Subscription, Consumable, etc.). iOS only.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "isTrialPeriod",
          "tags": [],
          "docs": "Whether the transaction is a trial period.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "isInIntroPricePeriod",
          "tags": [],
          "docs": "Whether the transaction is in intro price period.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "isInGracePeriod",
          "tags": [],
          "docs": "Whether the transaction is in grace period.",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "Product",
      "slug": "product",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "identifier",
          "tags": [],
          "docs": "Product Id.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "description",
          "tags": [],
          "docs": "Description of the product.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "title",
          "tags": [],
          "docs": "Title of the product.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "price",
          "tags": [],
          "docs": "Price of the product in the local currency.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "priceString",
          "tags": [],
          "docs": "Formatted price of the item, including its currency sign, such as €3.99.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "currencyCode",
          "tags": [],
          "docs": "Currency code for price and original price.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "currencySymbol",
          "tags": [],
          "docs": "Currency symbol for price and original price.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "isFamilyShareable",
          "tags": [],
          "docs": "Boolean indicating if the product is sharable with family",
          "complexTypes": [],
          "type": "boolean"
        },
        {
          "name": "subscriptionGroupIdentifier",
          "tags": [],
          "docs": "Group identifier for the product.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "subscriptionPeriod",
          "tags": [],
          "docs": "The Product subcription group identifier.",
          "complexTypes": [
            "SubscriptionPeriod"
          ],
          "type": "SubscriptionPeriod"
        },
        {
          "name": "introductoryPrice",
          "tags": [],
          "docs": "The Product introductory Price.",
          "complexTypes": [
            "SKProductDiscount"
          ],
          "type": "SKProductDiscount | null"
        },
        {
          "name": "discounts",
          "tags": [],
          "docs": "The Product discounts list.",
          "complexTypes": [
            "SKProductDiscount"
          ],
          "type": "SKProductDiscount[]"
        }
      ]
    },
    {
      "name": "SubscriptionPeriod",
      "slug": "subscriptionperiod",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "numberOfUnits",
          "tags": [],
          "docs": "The Subscription Period number of unit.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "unit",
          "tags": [],
          "docs": "The Subscription Period unit.",
          "complexTypes": [],
          "type": "number"
        }
      ]
    },
    {
      "name": "SKProductDiscount",
      "slug": "skproductdiscount",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "identifier",
          "tags": [],
          "docs": "The Product discount identifier.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "type",
          "tags": [],
          "docs": "The Product discount type.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "price",
          "tags": [],
          "docs": "The Product discount price.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "priceString",
          "tags": [],
          "docs": "Formatted price of the item, including its currency sign, such as €3.99.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "currencySymbol",
          "tags": [],
          "docs": "The Product discount currency symbol.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "currencyCode",
          "tags": [],
          "docs": "The Product discount currency code.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "paymentMode",
          "tags": [],
          "docs": "The Product discount paymentMode.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "numberOfPeriods",
          "tags": [],
          "docs": "The Product discount number Of Periods.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "subscriptionPeriod",
          "tags": [],
          "docs": "The Product discount subscription period.",
          "complexTypes": [
            "SubscriptionPeriod"
          ],
          "type": "SubscriptionPeriod"
        }
      ]
    },
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ]
    }
  ],
  "enums": [
    {
      "name": "PURCHASE_TYPE",
      "slug": "purchase_type",
      "members": [
        {
          "name": "INAPP",
          "value": "'inapp'",
          "tags": [],
          "docs": "A type of SKU for in-app products."
        },
        {
          "name": "SUBS",
          "value": "'subs'",
          "tags": [],
          "docs": "A type of SKU for subscriptions."
        }
      ]
    }
  ],
  "typeAliases": [],
  "pluginConfigs": []
}