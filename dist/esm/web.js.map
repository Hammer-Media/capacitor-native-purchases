{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,kBACX,SAAQ,SAAS;IAGjB,KAAK,CAAC,gBAAgB;QACpB,OAAO,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACrD,OAAO,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAEjB;QACC,OAAO,CAAC,KAAK,CAAC,iCAAiC,GAAG,OAAO,CAAC,CAAC;QAC3D,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,OAEhB;QACC,OAAO,CAAC,KAAK,CAAC,gCAAgC,GAAG,OAAO,CAAC,CAAC;QAC1D,OAAO,EAAE,OAAO,EAAE,EAAS,EAAE,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,OAIrB;QACC,OAAO,CAAC,KAAK,CAAC,oCAAoC,GAAG,OAAO,CAAC,CAAC;QAC9D,OAAO;YACL,aAAa,EAAE,qBAAqB;SACrC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,OAAO,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;QACvD,OAAO,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,OAAO,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;QACjD,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,0BAA0B;QAC9B,OAAO,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;QAC/D,OAAO,EAAE,GAAG,EAAE,gBAAgB,EAAE,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,uBAAuB;QAC3B,OAAO,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAC5D,sEAAsE;QACtE,sEAAsE;IACxE,CAAC;CACF","sourcesContent":["import { WebPlugin } from \"@capacitor/core\";\n\nimport type { NativePurchasesPlugin, Product, Transaction } from \"./definitions\";\n\nexport class NativePurchasesWeb\n  extends WebPlugin\n  implements NativePurchasesPlugin\n{\n  async restorePurchases(): Promise<{ transactions: Transaction[] }> {\n    console.error(\"restorePurchases only mocked in web\");\n    return { transactions: [] };\n  }\n\n  async getProducts(options: {\n    productIdentifiers: string[];\n  }): Promise<{ products: Product[] }> {\n    console.error(\"getProducts only mocked in web \" + options);\n    return { products: [] };\n  }\n\n  async getProduct(options: {\n    productIdentifier: string;\n  }): Promise<{ product: Product }> {\n    console.error(\"getProduct only mocked in web \" + options);\n    return { product: {} as any };\n  }\n\n  async purchaseProduct(options: {\n    productIdentifier: string;\n    planIdentifier?: string;\n    quantity?: number;\n  }): Promise<Transaction> {\n    console.error(\"purchaseProduct only mocked in web\" + options);\n    return {\n      transactionId: \"mock-transaction-id\",\n    };\n  }\n\n  async isBillingSupported(): Promise<{ isBillingSupported: boolean }> {\n    console.error(\"isBillingSupported only mocked in web\");\n    return { isBillingSupported: false };\n  }\n  \n  async getPluginVersion(): Promise<{ version: string }> {\n    console.warn(\"Cannot get plugin version in web\");\n    return { version: \"default\" };\n  }\n\n  async getLatestSignedTransaction(): Promise<{ jwt: string }> {\n    console.error(\"getLatestSignedTransaction only mocked in web\");\n    return { jwt: \"mock-jwt-token\" };\n  }\n\n  async showManageSubscriptions(): Promise<void> {\n    console.error(\"showManageSubscriptions only mocked in web\");\n    // In web, you could redirect to your web subscription management page\n    // window.open('https://your-app.com/manage-subscriptions', '_blank');\n  }\n}\n"]}