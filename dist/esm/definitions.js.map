{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAEA,MAAM,CAAN,IAAY,mBAOX;AAPD,WAAY,mBAAmB;IAC7B,qFAAoB,CAAA;IACpB,iEAAU,CAAA;IACV,uEAAa,CAAA;IACb,iEAAU,CAAA;IACV,iEAAU,CAAA;IACV,qEAAY,CAAA;AACd,CAAC,EAPW,mBAAmB,KAAnB,mBAAmB,QAO9B;AAED,MAAM,CAAN,IAAY,aAUX;AAVD,WAAY,aAAa;IACvB;;OAEG;IACH,gCAAe,CAAA;IAEf;;OAEG;IACH,8BAAa,CAAA;AACf,CAAC,EAVW,aAAa,KAAb,aAAa,QAUxB;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,eAyBX;AAzBD,WAAY,eAAe;IACzB;;OAEG;IACH,uEAAa,CAAA;IAEb;;OAEG;IACH,qFAAoB,CAAA;IAEpB;;OAEG;IACH,iFAAkB,CAAA;IAElB;;OAEG;IACH,mFAAmB,CAAA;IAEnB;;OAEG;IACH,+FAAyB,CAAA;AAC3B,CAAC,EAzBW,eAAe,KAAf,eAAe,QAyB1B;AACD,MAAM,CAAN,IAAY,cA2BX;AA3BD,WAAY,cAAc;IACxB,qIAAiD,CAAA;IAEjD;;;OAGG;IACH,qGAAiC,CAAA;IAEjC;;;;OAIG;IACH,iHAAuC,CAAA;IAEvC;;;OAGG;IACH,iGAA+B,CAAA;IAE/B;;;OAGG;IACH,2DAAY,CAAA;AACd,CAAC,EA3BW,cAAc,KAAd,cAAc,QA2BzB;AAED,MAAM,CAAN,IAAY,YA6CX;AA7CD,WAAY,YAAY;IACtB;;OAEG;IACH,mCAAmB,CAAA;IAEnB;;OAEG;IACH,iCAAiB,CAAA;IAEjB;;OAEG;IACH,qCAAqB,CAAA;IAErB;;OAEG;IACH,iCAAiB,CAAA;IAEjB;;OAEG;IACH,uCAAuB,CAAA;IAEvB;;OAEG;IACH,2CAA2B,CAAA;IAE3B;;OAEG;IACH,uCAAuB,CAAA;IAEvB;;OAEG;IACH,mCAAmB,CAAA;IAEnB;;OAEG;IACH,iCAAiB,CAAA;AACnB,CAAC,EA7CW,YAAY,KAAZ,YAAY,QA6CvB;AAED,MAAM,CAAN,IAAY,wBAaX;AAbD,WAAY,wBAAwB;IAClC;;OAEG;IACH,+HAAoC,CAAA;IACpC;;OAEG;IACH,qIAAmC,CAAA;IACnC;;OAEG;IACH,iIAAiC,CAAA;AACnC,CAAC,EAbW,wBAAwB,KAAxB,wBAAwB,QAanC;AAED;;;GAGG;AACH,MAAM,CAAN,IAAY,wBAiBX;AAjBD,WAAY,wBAAwB;IAClC;;OAEG;IACH,qEAAO,CAAA;IACP;;OAEG;IACH,uEAAQ,CAAA;IACR;;OAEG;IACH,yEAAS,CAAA;IACT;;OAEG;IACH,uEAAQ,CAAA;AACV,CAAC,EAjBW,wBAAwB,KAAxB,wBAAwB,QAiBnC;AAED;;;GAGG;AACH,MAAM,CAAN,IAAY,kBAaX;AAbD,WAAY,kBAAkB;IAC5B;;OAEG;IACH,6EAAiB,CAAA;IACjB;;OAEG;IACH,2EAAgB,CAAA;IAChB;;OAEG;IACH,uEAAc,CAAA;AAChB,CAAC,EAbW,kBAAkB,KAAlB,kBAAkB,QAa7B","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport enum ATTRIBUTION_NETWORK {\n  APPLE_SEARCH_ADS = 0,\n  ADJUST = 1,\n  APPSFLYER = 2,\n  BRANCH = 3,\n  TENJIN = 4,\n  FACEBOOK = 5,\n}\n\nexport enum PURCHASE_TYPE {\n  /**\n   * A type of SKU for in-app products.\n   */\n  INAPP = 'inapp',\n\n  /**\n   * A type of SKU for subscriptions.\n   */\n  SUBS = 'subs',\n}\n\n/**\n * Enum for billing features.\n * Currently, these are only relevant for Google Play Android users:\n * https://developer.android.com/reference/com/android/billingclient/api/BillingClient.FeatureType\n */\nexport enum BILLING_FEATURE {\n  /**\n   * Purchase/query for subscriptions.\n   */\n  SUBSCRIPTIONS,\n\n  /**\n   * Subscriptions update/replace.\n   */\n  SUBSCRIPTIONS_UPDATE,\n\n  /**\n   * Purchase/query for in-app items on VR.\n   */\n  IN_APP_ITEMS_ON_VR,\n\n  /**\n   * Purchase/query for subscriptions on VR.\n   */\n  SUBSCRIPTIONS_ON_VR,\n\n  /**\n   * Launch a price change confirmation flow.\n   */\n  PRICE_CHANGE_CONFIRMATION,\n}\nexport enum PRORATION_MODE {\n  UNKNOWN_SUBSCRIPTION_UPGRADE_DOWNGRADE_POLICY = 0,\n\n  /**\n   * Replacement takes effect immediately, and the remaining time will be\n   * prorated and credited to the user. This is the current default behavior.\n   */\n  IMMEDIATE_WITH_TIME_PRORATION = 1,\n\n  /**\n   * Replacement takes effect immediately, and the billing cycle remains the\n   * same. The price for the remaining period will be charged. This option is\n   * only available for subscription upgrade.\n   */\n  IMMEDIATE_AND_CHARGE_PRORATED_PRICE = 2,\n\n  /**\n   * Replacement takes effect immediately, and the new price will be charged on\n   * next recurrence time. The billing cycle stays the same.\n   */\n  IMMEDIATE_WITHOUT_PRORATION = 3,\n\n  /**\n   * Replacement takes effect when the old plan expires, and the new price will\n   * be charged at the same time.\n   */\n  DEFERRED = 4,\n}\n\nexport enum PACKAGE_TYPE {\n  /**\n   * A package that was defined with a custom identifier.\n   */\n  UNKNOWN = 'UNKNOWN',\n\n  /**\n   * A package that was defined with a custom identifier.\n   */\n  CUSTOM = 'CUSTOM',\n\n  /**\n   * A package configured with the predefined lifetime identifier.\n   */\n  LIFETIME = 'LIFETIME',\n\n  /**\n   * A package configured with the predefined annual identifier.\n   */\n  ANNUAL = 'ANNUAL',\n\n  /**\n   * A package configured with the predefined six month identifier.\n   */\n  SIX_MONTH = 'SIX_MONTH',\n\n  /**\n   * A package configured with the predefined three month identifier.\n   */\n  THREE_MONTH = 'THREE_MONTH',\n\n  /**\n   * A package configured with the predefined two month identifier.\n   */\n  TWO_MONTH = 'TWO_MONTH',\n\n  /**\n   * A package configured with the predefined monthly identifier.\n   */\n  MONTHLY = 'MONTHLY',\n\n  /**\n   * A package configured with the predefined weekly identifier.\n   */\n  WEEKLY = 'WEEKLY',\n}\n\nexport enum INTRO_ELIGIBILITY_STATUS {\n  /**\n   * doesn't have enough information to determine eligibility.\n   */\n  INTRO_ELIGIBILITY_STATUS_UNKNOWN = 0,\n  /**\n   * The user is not eligible for a free trial or intro pricing for this product.\n   */\n  INTRO_ELIGIBILITY_STATUS_INELIGIBLE,\n  /**\n   * The user is eligible for a free trial or intro pricing for this product.\n   */\n  INTRO_ELIGIBILITY_STATUS_ELIGIBLE,\n}\n\n/**\n * Subscription period unit types.\n * Maps to StoreKit 2 Product.SubscriptionPeriod.Unit\n */\nexport enum SUBSCRIPTION_PERIOD_UNIT {\n  /**\n   * Day unit\n   */\n  DAY = 0,\n  /**\n   * Week unit\n   */\n  WEEK = 1,\n  /**\n   * Month unit\n   */\n  MONTH = 2,\n  /**\n   * Year unit\n   */\n  YEAR = 3,\n}\n\n/**\n * Payment mode for subscription offers.\n * Maps to StoreKit 2 Product.SubscriptionOffer.PaymentMode\n */\nexport enum OFFER_PAYMENT_MODE {\n  /**\n   * Pay as you go - price charged each billing period\n   */\n  PAY_AS_YOU_GO = 0,\n  /**\n   * Pay up front - total price charged at the beginning\n   */\n  PAY_UP_FRONT = 1,\n  /**\n   * Free trial - no charge during the offer period\n   */\n  FREE_TRIAL = 2,\n}\n\nexport interface Transaction {\n  /**\n   * The unique transaction identifier.\n   */\n  readonly transactionId: string;\n  /**\n   * The original transaction identifier (for renewals). iOS only.\n   */\n  readonly originalTransactionId?: string;\n  /**\n   * Receipt data for validation (iOS only - base64 encoded receipt)\n   */\n  readonly receipt?: string;\n  /**\n   * An optional obfuscated identifier that uniquely associates the transaction with a user account in your app.\n   *\n   * PURPOSE:\n   * - Fraud detection: Helps platforms detect irregular activity (e.g., many devices purchasing on the same account)\n   * - User linking: Links purchases to in-game characters, avatars, or in-app profiles\n   *\n   * PLATFORM DIFFERENCES:\n   * - iOS: Must be a valid UUID format (e.g., \"550e8400-e29b-41d4-a716-446655440000\")\n   *        Apple's StoreKit 2 requires UUID format for the appAccountToken parameter\n   * - Android: Can be any obfuscated string (max 64 chars), maps to Google Play's ObfuscatedAccountId\n   *           Google recommends using encryption or one-way hash\n   *\n   * SECURITY REQUIREMENTS (especially for Android):\n   * - DO NOT store Personally Identifiable Information (PII) like emails in cleartext\n   * - Use encryption or a one-way hash to generate an obfuscated identifier\n   * - Maximum length: 64 characters (both platforms)\n   * - Storing PII in cleartext will result in purchases being blocked by Google Play\n   *\n   * IMPLEMENTATION EXAMPLE:\n   * ```typescript\n   * // For iOS: Generate a deterministic UUID from user ID\n   * import { v5 as uuidv5 } from 'uuid';\n   * const NAMESPACE = '6ba7b810-9dad-11d1-80b4-00c04fd430c8'; // Your app's namespace UUID\n   * const appAccountToken = uuidv5(userId, NAMESPACE);\n   *\n   * // For Android: Can also use UUID or any hashed value\n   * // The same UUID approach works for both platforms\n   * ```\n   */\n  readonly appAccountToken?: string | null;\n  /**\n   * Product Id associated with the transaction.\n   */\n  readonly productIdentifier?: string;\n  /**\n   * Product identifier associated with the transaction. iOS only.\n   */\n  readonly productId?: string;\n  /**\n   * Purchase quantity. iOS only.\n   */\n  readonly quantity?: number;\n  /**\n   * Purchase date (string in ISO 8601 format for Android, number in milliseconds since epoch for iOS).\n   */\n  readonly purchaseDate?: string | number;\n  /**\n   * Original purchase date (string in ISO 8601 format for Android, number in milliseconds since epoch for iOS).\n   */\n  readonly originalPurchaseDate?: string | number;\n  /**\n   * Transaction signed date in milliseconds since epoch. iOS only.\n   */\n  readonly signedDate?: number;\n  /**\n   * Expiration date of the transaction in ISO 8601 format (for subscriptions).\n   */\n  readonly expirationDate?: string;\n  /**\n   * Expiration date for subscriptions (in milliseconds since epoch). iOS only.\n   */\n  readonly expiresDate?: number;\n  /**\n   * Whether the transaction is still active/valid.\n   */\n  readonly isActive?: boolean;\n  /**\n   * Whether the subscription will be cancelled at the end of the billing cycle, or null if not cancelled. Only available on iOS.\n   */\n  readonly willCancel?: boolean | null;\n  /**\n   * Purchase state of the transaction.\n   */\n  readonly purchaseState?: string;\n  /**\n   * Transaction reason (PURCHASE, RENEWAL, etc.). iOS only.\n   */\n  readonly transactionReason?: string;\n  /**\n   * App Store environment (Sandbox/Production). iOS only.\n   */\n  readonly environment?: string;\n  /**\n   * App Store storefront. iOS only.\n   */\n  readonly storefront?: string;\n  /**\n   * App Store storefront identifier. iOS only.\n   */\n  readonly storefrontId?: string;\n  /**\n   * Transaction price. iOS only.\n   */\n  readonly price?: number;\n  /**\n   * Currency code. iOS only.\n   */\n  readonly currency?: string;\n  /**\n   * Subscription group identifier (for subscriptions). iOS only.\n   */\n  readonly subscriptionGroupId?: string;\n  /**\n   * Web order line item identifier. iOS only.\n   */\n  readonly webOrderLineItemId?: string;\n  /**\n   * App transaction identifier. iOS only.\n   */\n  readonly appTransactionId?: string;\n  /**\n   * App bundle identifier. iOS only.\n   */\n  readonly bundleId?: string;\n  /**\n   * Device verification data. iOS only.\n   */\n  readonly deviceVerification?: string;\n  /**\n   * Device verification nonce. iOS only.\n   */\n  readonly deviceVerificationNonce?: string;\n  /**\n   * In-app ownership type (PURCHASED, FAMILY_SHARED, etc.). iOS only.\n   */\n  readonly inAppOwnershipType?: string;\n  /**\n   * Signed transaction JWT token. iOS only.\n   */\n  readonly jwt?: string;\n  /**\n   * Order ID associated with the transaction (Android).\n   */\n  readonly orderId?: string;\n  /**\n   * Purchase token associated with the transaction (Android).\n   */\n  readonly purchaseToken?: string;\n  /**\n   * Whether the purchase has been acknowledged (Android).\n   */\n  readonly isAcknowledged?: boolean;\n  /**\n   * Product type (inapp or subs).\n   */\n  readonly productType?: string;\n  /**\n   * Product type (Auto-Renewable Subscription, Consumable, etc.). iOS only.\n   */\n  readonly type?: string;\n  /**\n   * Whether the transaction is a trial period.\n   */\n  readonly isTrialPeriod?: boolean;\n  /**\n   * Whether the transaction is in intro price period.\n   */\n  readonly isInIntroPricePeriod?: boolean;\n  /**\n   * Whether the transaction is in grace period.\n   */\n  readonly isInGracePeriod?: boolean;\n}\n\nexport interface SubscriptionPeriod {\n  /**\n   * The Subscription Period number of unit.\n   */\n  readonly numberOfUnits: number;\n  /**\n   * The Subscription Period unit.\n   */\n  readonly unit: number;\n}\nexport interface SKProductDiscount {\n  /**\n   * The Product discount identifier.\n   */\n  readonly identifier: string;\n  /**\n   * The Product discount type.\n   */\n  readonly type: number;\n  /**\n   * The Product discount price.\n   */\n  readonly price: number;\n  /**\n   * Formatted price of the item, including its currency sign, such as €3.99.\n   */\n  readonly priceString: string;\n  /**\n   * The Product discount currency symbol.\n   */\n  readonly currencySymbol: string;\n  /**\n   * The Product discount currency code.\n   */\n  readonly currencyCode: string;\n  /**\n   * The Product discount paymentMode.\n   */\n  readonly paymentMode: number;\n  /**\n   * The Product discount number Of Periods.\n   */\n  readonly numberOfPeriods: number;\n  /**\n   * The Product discount subscription period.\n   */\n  readonly subscriptionPeriod: SubscriptionPeriod;\n}\nexport interface Product {\n  /**\n   * Product Id.\n   */\n  readonly identifier: string;\n  /**\n   * Description of the product.\n   */\n  readonly description: string;\n  /**\n   * Title of the product.\n   */\n  readonly title: string;\n  /**\n   * Price of the product in the local currency.\n   */\n  readonly price: number;\n  /**\n   * Formatted price of the item, including its currency sign, such as €3.99.\n   */\n  readonly priceString: string;\n  /**\n   * Currency code for price and original price.\n   */\n  readonly currencyCode: string;\n  /**\n   * Currency symbol for price and original price.\n   */\n  readonly currencySymbol: string;\n  /**\n   * Boolean indicating if the product is sharable with family\n   */\n  readonly isFamilyShareable: boolean;\n  /**\n   * Group identifier for the product.\n   */\n  readonly subscriptionGroupIdentifier: string;\n  /**\n   * The Product subcription group identifier.\n   */\n  readonly subscriptionPeriod: SubscriptionPeriod;\n  /**\n   * The Product introductory Price.\n   */\n  readonly introductoryPrice: SKProductDiscount | null;\n  /**\n   * The Product discounts list.\n   */\n  readonly discounts: SKProductDiscount[];\n}\n\nexport interface NativePurchasesPlugin {\n  /**\n   * Restores a user's previous  and links their appUserIDs to any user's also using those .\n   */\n  restorePurchases(): Promise<{ transactions: Transaction[] }>;\n\n\n  /**\n   * Started purchase process for the given product.\n   *\n   * @param options - The product to purchase\n   * @param options.productIdentifier - The product identifier of the product you want to purchase.\n   * @param options.productType - Only Android, the type of product, can be inapp or subs. Will use inapp by default.\n   * @param options.planIdentifier - Only Android, the identifier of the base plan you want to purchase from Google Play Console. REQUIRED for Android subscriptions, ignored on iOS.\n   * @param options.quantity - Only iOS, the number of items you wish to purchase. Will use 1 by default.\n   * @param options.appAccountToken - Optional identifier uniquely associated with the user's account in your app.\n   *                                  PLATFORM REQUIREMENTS:\n   *                                  - iOS: Must be a valid UUID format (StoreKit 2 requirement)\n   *                                  - Android: Can be any obfuscated string (max 64 chars), maps to ObfuscatedAccountId\n   *                                  SECURITY: DO NOT use PII like emails in cleartext - use UUID or hashed value.\n   *                                  RECOMMENDED: Use UUID v5 with deterministic generation for cross-platform compatibility.\n   */\n  purchaseProduct(options: {\n    productIdentifier: string;\n    planIdentifier?: string;\n    productType?: PURCHASE_TYPE;\n    quantity?: number;\n    appAccountToken?: string;\n  }): Promise<Transaction>;\n\n  /**\n   * Gets the product info associated with a list of product identifiers.\n   *\n   * @param options - The product identifiers you wish to retrieve information for\n   * @param options.productIdentifiers - Array of product identifiers\n   * @param options.productType - Only Android, the type of product, can be inapp or subs. Will use inapp by default.\n   * @returns - The requested product info\n   */\n  getProducts(options: { productIdentifiers: string[]; productType?: PURCHASE_TYPE }): Promise<{ products: Product[] }>;\n\n  /**\n   * Gets the product info for a single product identifier.\n   *\n   * @param options - The product identifier you wish to retrieve information for\n   * @param options.productIdentifier - The product identifier\n   * @param options.productType - Only Android, the type of product, can be inapp or subs. Will use inapp by default.\n   * @returns - The requested product info\n   */\n  getProduct(options: { productIdentifier: string; productType?: PURCHASE_TYPE }): Promise<{ product: Product }>;\n\n  /**\n   * Check if billing is supported for the current device.\n   *\n   *\n   */\n  isBillingSupported(): Promise<{ isBillingSupported: boolean }>;\n  \n  /**\n   * Get the native Capacitor plugin version\n   *\n   * @returns {Promise<{ id: string }>} an Promise with version for this device\n   * @throws An error if the something went wrong\n   */\n  getPluginVersion(): Promise<{ version: string }>;\n\n  /**\n   * Gets all the user's purchases (both in-app purchases and subscriptions).\n   * This method queries the platform's purchase history for the current user.\n   *\n   * @param options - Optional parameters for filtering purchases\n   * @param options.productType - Only Android, filter by product type (inapp or subs). If not specified, returns both types.\n   * @param options.appAccountToken - Optional filter to restrict results to purchases that used the provided account token.\n   *                                   Must be the same identifier used during purchase (UUID format for iOS, any obfuscated string for Android).\n   *                                   iOS: UUID format required. Android: Maps to ObfuscatedAccountId.\n   * @returns {Promise<{ purchases: Transaction[] }>} Promise that resolves with array of user's purchases\n   * @throws An error if the purchase query fails\n   * @since 7.2.0\n   */\n  getPurchases(options?: {\n    productType?: PURCHASE_TYPE;\n    appAccountToken?: string;\n  }): Promise<{ purchases: Transaction[] }>;\n\n  /**\n   * Get the latest signed transaction JWT token. iOS only.\n   *\n   * @returns {Promise<{ jwt: string }>} Promise with the JWT token\n   * @throws An error if no transactions found or StoreKit 2 not available\n   */\n  getLatestSignedTransaction(): Promise<{ jwt: string }>;\n\n  /**\n   * Opens the native subscription management interface for the user.\n   */\n  showManageSubscriptions(): Promise<void>;\n\n  /**\n   * Opens the platform's native subscription management page.\n   * This allows users to view, modify, or cancel their subscriptions.\n   *\n   * - iOS: Opens the App Store subscription management page for the current app\n   * - Android: Opens the Google Play subscription management page\n   *\n   * @returns {Promise<void>} Promise that resolves when the management page is opened\n   * @throws An error if the subscription management page cannot be opened\n   * @since 7.10.0\n   */\n  manageSubscriptions(): Promise<void>;\n\n  /**\n   * Listen for StoreKit transaction updates delivered by Apple's Transaction.updates.\n   * Fires on app launch if there are unfinished transactions, and for any updates afterward.\n   * iOS only.\n   */\n  addListener(\n    eventName: 'transactionUpdated',\n    listenerFunc: (transaction: Transaction) => void,\n  ): Promise<PluginListenerHandle>;\n\n  /** Remove all registered listeners */\n  removeAllListeners(): Promise<void>;\n}\n"]}